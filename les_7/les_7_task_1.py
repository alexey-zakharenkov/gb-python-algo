"""
Отсортируйте по убыванию методом пузырька одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.
Примечания:
● алгоритм сортировки должен быть в виде функции, которая принимает
на вход массив данных,
● постарайтесь сделать алгоритм умнее, но помните, что у вас должна
остаться сортировка пузырьком. Улучшенные версии сортировки, например,
расчёской, шейкерная и другие в зачёт не идут.
"""

import random


def optimized_bubble_sort_desc(a):
    """Сортировка по УБЫВАНИЮ.
    Две идеи оптимизации:
    1) После первого прогона минимальный элемент станет на своё место в конец,
       после чего его можно не рассматривать и сократить длину прогона на 1.
       В общем виде, после i итераций i элементов займут своё место в конце массива,
       и i-й прогон нужно делать только по len(a) - i начальным элементам.
    2) Если в процессе какого-то прогона не произошло ни одного свапа,
       алгоритм можно завершать.
    """
    for i in range(len(a) - 1):
        swapped = False
        for j in range(len(a) - 1 - i): # 1-я оптимизация
            if a[j] < a[j + 1]:
                a[j], a[j + 1] = a[j + 1], a[j]
                swapped = True
        if not swapped:
            break  # 2-я оптимизация


if __name__ == "__main__":

    LOWER_BOUND = -100
    UPPER_BOUND = 100 - 1
    SIZE = 10
    a = [random.randint(LOWER_BOUND, UPPER_BOUND) for _ in range(SIZE)]

    print("Исходный массив:\n", a, sep='')
    optimized_bubble_sort_desc(a)
    print("Отсортированный массив:\n", a, sep='')
